@using BlazorApp.Extensions.ViewModels.CatalogVMs

<div>
    <div class="category-item @(IsSelected() ? "selected" : "")" style="margin-left: @(Level * 20)px;">
        <div class="category-content" @onclick="() => OnCategorySelected?.Invoke(Category)">

            <span class="category-toggle" @onclick="ToggleExpanded" @onclick:stopPropagation="true">
                @if (HasChildren())
                {
                    @(IsExpanded() ? "▼" : "▶")
                }
                else
                {
                    <text>·</text>
                }
            </span>

            <i class="@(HasChildren() ? "fas fa-folder" : "fas fa-tag") category-icon"></i>

            @Category.Title
        </div>

        <AuthorizeView Roles="Admin">
            <div class="category-actions">
                <button class="btn btn-sm btn-secondary btn-tree"
                        @onclick="() => OnEditCategory?.Invoke(Category.Id.Value)"
                        @onclick:stopPropagation="true">
                    ✏
                </button>
            </div>
        </AuthorizeView>
    </div>

    @if (HasChildren() && IsExpanded())
    {
        <div class="children-container">
            @foreach (var child in GetChildren())
            {
                <CategoryNode Category="child"
                              AllCategories="AllCategories"
                              OnCategorySelected="OnCategorySelected"
                              OnEditCategory="OnEditCategory"
                              Level="Level + 1"
                              ExpandedCategories="ExpandedCategories"
                              SelectedCategory="SelectedCategory" />
            }
        </div>
    }
</div>
@code {
    [Parameter] public CategoryViewModel Category { get; set; }
    [Parameter] public List<CategoryViewModel> AllCategories { get; set; }
    [Parameter] public Func<CategoryViewModel, Task> OnCategorySelected { get; set; }  // Changed to Func<T, Task>
    [Parameter] public Action<Guid> OnEditCategory { get; set; }
    [Parameter] public int Level { get; set; }
    [Parameter] public HashSet<Guid> ExpandedCategories { get; set; } = new HashSet<Guid>();
    [Parameter] public CategoryViewModel SelectedCategory { get; set; }

    private List<CategoryViewModel> GetChildren()
    {
        return AllCategories?.Where(c => c.ParentId == Category.Id).ToList() ?? new List<CategoryViewModel>();
    }

    private bool HasChildren()
    {
        return GetChildren().Any();
    }

    private bool IsExpanded()
    {
        return ExpandedCategories.Contains(Category.Id.Value);
    }

    private bool IsSelected()
    {
        return SelectedCategory?.Id == Category.Id;
    }

    private void ToggleExpanded()
    {
        if (ExpandedCategories.Contains(Category.Id.Value))
        {
            ExpandedCategories.Remove(Category.Id.Value);
        }
        else
        {
            ExpandedCategories.Add(Category.Id.Value);
        }
    }

    private async Task HandleCategoryClick()
    {
        if (OnCategorySelected != null)
        {
            await OnCategorySelected(Category);
        }
    }
}