@page "/myjobs/job/{jobId:guid}"
@implements IDisposable;

@using BlazorApp.Extensions.ViewModels.CatalogVMs
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Numerics;
@using Nethereum.Metamask.Blazor
@using Nethereum.UI;
@using Nethereum.Metamask;
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Siwe.Core
@using Nethereum.Util
@using Nethereum.ABI.EIP712
@using Nethereum.ABI.FunctionEncoding.Attributes
@using Nethereum.Signer
@using Nethereum.Signer.EIP712
@using Nethereum.RPC.HostWallet
@using ServiceCenterPayment
@using ServiceCenterPayment.ContractDefinition
@inject NavigationManager NavigationManager
@inject IJobService JobService
@inject ITasksService TasksService
@inject IUserService UserService
@inject IPartsService PartService
@inject IOrderService OrderService
@inject IJSRuntime JS
@inject IVehicleService VehicleService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SelectedEthereumHostProviderService selectedHostProviderService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Деталі роботи</PageTitle>
<Metamask SelectedAccountTruncateLength="15" ConnectText="Please Connect" InstallMetamaskText="Please install Metamask" />

<h3>Деталі роботи</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (job != null && mainMechanic != null)
{
    <div>
        <p><strong>ID:</strong> @job.Id.ToString()</p>
        <p><strong>Модель автомобіля:</strong>@job.ModelName</p>
        <p><strong>Опис проблеми:</strong> @job.Description </p>
        <p><strong>Специфікація:</strong> @job.Specialisation </p>
        <p><strong>Відповідальний механік:</strong> @mainMechanic.UserName </p>
        <p><strong>Вартість роботи:</strong> @job.Price</p>
        @if (!job.IsPaid)
        {
            <AuthorizeView Roles="User,Mechanic,Admin">
                <button class="btn btn-primary mb-3" @onclick="PayJob">Оплатити роботу</button>
            </AuthorizeView>
        }
        else
        {
            <p><strong>Робота оплачена</strong></p>
        }
        <p /> 
        @if (order != null)
        {
        <p><strong>ID Замовлення:</strong> @job.OrderId</p>
        <p><strong>Вафртість запчастин:</strong> @order.TotalPrice.Value</p>
      
            @if (order.Status != OrderStatus.Paid)
            {
                <AuthorizeView Roles="User,Mechanic,Admin">
                    <button class="btn btn-primary mb-3" @onclick="PayOrder">Оплатити замовлення</button>
                </AuthorizeView>
            }
            else
            {
                <p><strong>Замовлення оплачене</strong></p>
            }

        }
        <p><strong>Дата візиту:</strong> @job.IssueDate.ToString()</p>
        @if (job.FinishDate != null)
        {
            <p><strong>Дата завершення роботи:</strong> @job.FinishDate.Value.ToString("dd/MM/yyyy")</p>
        }
    
    
        <h4>Список завдань</h4>
        <QuickGrid Items="@TaskViewModelsQueryable">
            <PropertyColumn Property="@(t => t.Name)" Title="Назва" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(t => t.Task)" Title="Опис"></PropertyColumn>
            <PropertyColumn Property="@(t => t.Status)" Title="Статус" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(t => t.Price)" Title="Ціна"></PropertyColumn>

            <TemplateColumn Title="Механік">
                @if (context.MechanicId != null)
                {
                    var vehicle = mechanics.FirstOrDefault(p => p.Id == context.MechanicId);
                    <span>@(vehicle != null ? vehicle.UserName : "Механік не знайдений")</span>
                }
                else
                {
                    <span>@(job.ModelName ?? "Механік не вказаний")</span>
                }
            </TemplateColumn>
        </QuickGrid>
        @if (parts!=null)
        {
        <h4>Список запчастин</h4>

        <QuickGrid Items="@PartsViewModelsQueryable">
            <PropertyColumn Property="@(t => t.PartName)" Title="Назва" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(t => t.Description)" Title="Опис" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(t => t.ManufacturerNumber)" Title="Номер виробника" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(t => t.PriceRegular)" Title="Ціна"></PropertyColumn>
        </QuickGrid>
        }
    </div>
}
else
{
    <p>Завантаження...</p>
}

@code {
    [Microsoft.AspNetCore.Components.Parameter]
    public Guid jobId { get; set; }

    private string errorMessage;

    private JobVM? job;
    private List<TaskViewModel> tasks;
    private List<MechanicViewModel> mechanics;
    private List<PartViewModel> parts;
    private MechanicViewModel mainMechanic;
    private OrderViewModel? order;

    private IQueryable<PartViewModel> PartsViewModelsQueryable;

    private IQueryable<TaskViewModel> TaskViewModelsQueryable;



    string SelectedAccount { get; set; }
    long SelectedChainId { get; set; }
    string BlockHash { get; set; }
    IEthereumHostProvider _ethereumHostProvider;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            try
            {
                job = await JobService.GetJobById(jobId);

                mainMechanic = await UserService.GetMechanic(job.MechanicId.Value);
                
                try
                {
                    var veh = await VehicleService.GetById(job.VehicleId.Value);
                    job.ModelName = veh.fullModelName;
                }
                catch
                {
                    job.ModelName = "Не знайдено";
                }
            }
            catch (Exception e)
            {
                errorMessage = $"Помилка завантаження деталей роботи: {e.Message}";
            }

            if (job == null)
            {
                errorMessage = "Робота не знайдена.";
            }
            else
            {
                var mechanicViewModels = await UserService.GetMechanics();
                mechanics = mechanicViewModels.ToList();
                var tsksViewModels = await TasksService.GetTasksByJobId(job.Id.Value);
                if (tsksViewModels.Count() > 0)
                {
                    tasks = tsksViewModels.ToList();
                    TaskViewModelsQueryable = tasks.AsQueryable();
                }

                if (job.OrderId != null)
                {
                    order = await OrderService.GetOrderByIdAsync(job.OrderId.Value);
                    var partsViewModels = await PartService.GetPartsByOrderIdAsync(job.OrderId.Value);
                    parts = partsViewModels.ToList();
                    PartsViewModelsQueryable = parts.AsQueryable();
                }

            }
         }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження деталей роботи: {ex.Message}";
            this.StateHasChanged();

        }
        _ethereumHostProvider = selectedHostProviderService.SelectedHost;
        if (_ethereumHostProvider != null)
        {
            _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
            _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
            _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
        }
    }
    public void Dispose()
    {
        if (_ethereumHostProvider != null)
        {
            _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
            _ethereumHostProvider.NetworkChanged -= HostProvider_NetworkChanged;
            _ethereumHostProvider.EnabledChanged -= HostProviderOnEnabledChanged;
        }
    }
    private async Task PayOrder()
    {
        try
        {
            var web3 = await _ethereumHostProvider.GetWeb3Async();
            var serv = new ServiceCenterPaymentServiceBase(web3, "0x5fbdb2315678afecb367f032d93f642f64180aa3");

            // Отримуємо замовлення
            var ord = await OrderService.GetOrderByIdAsync(job.OrderId.Value);
            if (!ord.OrderIndex.HasValue)
            {
                errorMessage = "Зачекайте обробки замовлення блокчейном";               
                this.StateHasChanged();
                return;
            }

            if (ord.IsPaid == true)
            {
                errorMessage = "Замовлення оплачене";               
                this.StateHasChanged();
                return;
            }
            // Перевіряємо чи можна спарсити ціну
            if (!BigInteger.TryParse(ord.WEIPrice, out var amountToSend))
            {
                errorMessage = "Некоректна сума для платежу";               
                this.StateHasChanged();
                return;
            }

            // Отримуємо адресу першого доступного акаунта
            var accounts = await web3.Eth.Accounts.SendRequestAsync();
            if (accounts == null || accounts.Length == 0)
            {
                errorMessage = "Не знайдено жодного акаунта";
                this.StateHasChanged();
                return;
            }

            var fromAddress = accounts[0];

            // Отримуємо актуальний nonce для транзакції
            var nonce = await web3.Eth.Transactions.GetTransactionCount.SendRequestAsync(fromAddress);

            // Відправляємо транзакцію
            var tr = await serv.PayOrderRequestAndWaitForReceiptAsync(new PayOrderFunction()
                {
                    Nonce = (BigInteger)nonce.Value, // Встановлюємо коректний nonce
                    AmountToSend = amountToSend,
                    FromAddress = fromAddress,
                    OrderIndex = (BigInteger)ord.OrderIndex
                });
        }
        catch (Exception e)
        {
            errorMessage = $"Помилка надсилання коштів: {e.Message}";
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }



    private async void PayJob()
    {
        try
        {
            var web3 = await _ethereumHostProvider.GetWeb3Async();
            var serv = new ServiceCenterPaymentServiceBase(web3, "0x5fbdb2315678afecb367f032d93f642f64180aa3");

            // Отримуємо замовлення
            var jb = await JobService.GetJobById(job.Id.Value);
            if (!jb.jobIndex.HasValue)
            {
                errorMessage = "Зачекайте обробки роботи блокчейном";
                this.StateHasChanged();
                return;
            }

            if (jb.IsPaid == true)
            {
                errorMessage = "Робота оплачена";
                this.StateHasChanged();
                return;
            }
            // Перевіряємо чи можна спарсити ціну
            if (!BigInteger.TryParse(jb.WEIPrice, out var amountToSend))
            {
                errorMessage = "Некоректна сума для платежу";
                this.StateHasChanged();
                return;
            }

            // Отримуємо адресу першого доступного акаунта
            var accounts = await web3.Eth.Accounts.SendRequestAsync();
            if (accounts == null || accounts.Length == 0)
            {
                errorMessage = "Не знайдено жодного акаунта";
                this.StateHasChanged();
                return;
            }

            var fromAddress = accounts[0];

            // Отримуємо актуальний nonce для транзакції
            var nonce = await web3.Eth.Transactions.GetTransactionCount.SendRequestAsync(fromAddress);

            // Відправляємо транзакцію
            var tr = await serv.PayJobRequestAndWaitForReceiptAsync(new PayJobFunction()
                {
                    Nonce = (BigInteger)nonce.Value, // Встановлюємо коректний nonce
                    AmountToSend = amountToSend,
                    FromAddress = fromAddress,
                    JobIndex = (BigInteger)jb.jobIndex
                });
        }
        catch (Exception e)
        {
            errorMessage = $"Помилка надсилання коштів: {e.Message}";
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }

    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            this.StateHasChanged();

        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (int)chainId.Value;
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await GetChainId();
        this.StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(long chainId)
    {
        SelectedChainId = chainId;
        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }
}
