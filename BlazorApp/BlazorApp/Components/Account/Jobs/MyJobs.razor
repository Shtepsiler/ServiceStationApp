@page "/myjobs"
@using BlazorApp.Extensions.ViewModels.CatalogVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using System.Net.Http.Json
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.VehicleVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IJobService JobService 
@inject IVehicleService VehicleService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Мої візити</PageTitle>

<h3>Мої візити</h3>


    <QuickGrid Items="@visitsQueryable" Class="mt-4">
       
    <PropertyColumn Property="@(v => v.Description)" Title="Опис проблеми" />
    <PropertyColumn Property="@(v => v.ModelName)" Title="Модель" />
    <PropertyColumn Property="@(v => v.IssueDate)" Title="Дата візиту" />
    <PropertyColumn Property="@(v => v.Status)" Title="Статус" />
    <TemplateColumn Title="Actions">
        <button class="btn btn-info" @onclick="() => ViewVisitDetails(context.Id.Value)">Переглянути</button>
    </TemplateColumn>
    </QuickGrid>

@if (visits?.Count == 0)
{
    <a href="/ScheduleAppointment" class="btn btn-primary mt-3">Записатися на візит</a>
}


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}
@code {

    private List<JobVMForUser> visits;
    private IQueryable<JobVMForUser> visitsQueryable;
    private List<VehicleViewModel> vehicles = new();
    private string userid;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        try
        {
            if (user.Identity.IsAuthenticated)
            {
                userid = user.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).FirstOrDefault();
            }
            var visitsVMs = await JobService.GetJobsBYUserId(Guid.Parse(userid));
            foreach (var v in visitsVMs)
            {
                try {
                    var veh = await VehicleService.GetById(v.VehicleId);
                    v.ModelName = veh.fullModelName;
                }
                catch
                {
                    v.ModelName = "Не знайдено";
                }
            }
            visits = visitsVMs.ToList();
            if (visits.Count == 0)
            {
                errorMessage = "Не знайдено жодних візитів";

            }
            visitsQueryable = visits.AsQueryable();
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
    }


    private async Task SearchVisits()
    {
        // Приклад запиту до API для отримання робіт користувача
 
    }

    private void ViewVisitDetails(Guid visitId)
    {
        NavigationManager.NavigateTo($"/myjobs/job/{visitId}");
    }


    public class SearchModel
    {
        public string SearchTerm { get; set; }
    }

}
