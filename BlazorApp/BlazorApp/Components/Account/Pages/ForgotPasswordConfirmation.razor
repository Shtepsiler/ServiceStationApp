@page "/Account/ForgotPasswordConfirmation"
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data
@using BlazorApp.Services.Interfaces
@inject IUserService userServisce
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ForgotPasswordConfirmation> Logger

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@message" />
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="old-password" class="form-label">New password </label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="old-password" class="form-label">Confirm password </label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;


    [SupplyParameterFromQuery]
    private string? Id { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task OnValidSubmitAsync()
    {

        try
        {
            await userServisce.ResetPassword(Guid.Parse(Id), Code, Input.NewPassword);
        }
        catch (ValidationException e)
        {
            RedirectManager.RedirectTo("/Account/InvalidPasswordReset");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
