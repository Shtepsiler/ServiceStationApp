@page "/job-info/{jobId:guid}"

@implements IDisposable;
@using BlazorApp.Components.Account
@using BlazorApp.Extensions.ViewModels.CatalogVMs
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Extensions.ViewModels.VehicleVMs
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims;
@using ServiceCenterPayment;
@using ServiceCenterPayment.ContractDefinition;
@using System.Numerics;
@using Nethereum.Metamask.Blazor
@using Nethereum.UI;
@using Nethereum.Metamask;
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Siwe.Core
@using Nethereum.Util
@using Nethereum.ABI.EIP712
@using Nethereum.ABI.FunctionEncoding.Attributes
@using Nethereum.Signer
@using Nethereum.Signer.EIP712
@using Nethereum.RPC.HostWallet

@inject NavigationManager NavigationManager
@inject IJobService JobService
@inject ITasksService TasksService
@inject IUserService UserService
@inject IOrderService OrderService
@inject IVehicleService VehicleService
@inject IPartsService PartsService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SelectedEthereumHostProviderService selectedHostProviderService

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Деталі роботи</PageTitle>
<Metamask SelectedAccountTruncateLength="15" ConnectText="Please Connect" InstallMetamaskText="Please install Metamask" />

<h3>Деталі роботи</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (job != null)
{
    <div class="job-details-container">
        <div class="job-info">
            <p><strong>ID:</strong> @job.Id.ToString()</p>
            <p><strong>Модель автомобіля:</strong> @job.ModelName</p>
            <p><strong>Опис проблеми:</strong> @job.Description</p>
            <p><strong>Ціна:</strong> @job.Price</p>
            <p><strong>Дата візиту:</strong> @job.IssueDate.ToString()</p>
            @if (job.FinishDate != null)
            {
                <p><strong>Дата завершення роботи:</strong> @job.FinishDate.Value.ToString()</p>
            }
        </div>

        <AuthorizeView Roles="Admin,Mechanic">
            <button class="btn btn-primary mb-3" @onclick="() => AddTask(job.Id)">Додати завдання</button>
        </AuthorizeView>
        @if (!job.IsPaid)
        {
            <AuthorizeView Roles="Admin">
                <button class="btn btn-primary mb-3" @onclick="PayJob">Оплатити роботу</button>
            </AuthorizeView>
        }
        else
        {
            <p><strong>Робота оплачена</strong></p>
        }
        @if (job.OrderId != null)
        {
            <p><strong>ID Замовлення:</strong> @job.OrderId</p>
            <p><strong>Ціна:</strong> @order.TotalPrice.Value</p>

            <button class="btn btn-primary mb-3" @onclick="NavtoOrder">Перейти до замовлення</button>
            if (order.Status != OrderStatus.Paid) 
            {
                <AuthorizeView Roles="Admin"> 
                    <button class="btn btn-primary mb-3" @onclick="PayOrder">Оплатити замовлення</button> 
                </AuthorizeView> 
            } 
            else{
                <p><strong>Замовлення оплачене</strong></p>
            }
        }
        else
        {
            <AuthorizeView Roles="Admin,Mechanic">
                <button class="btn btn-primary mb-3" @onclick="AddOrder">Додати замовлення</button>
            </AuthorizeView>
        }

        <div class="task-list">
            <h4>Список завдань</h4>
            <QuickGrid Items="@taskViewModelsQueryable" Class="table table-striped">
                <PropertyColumn Property="@(t => t.Name)" Title="Назва" Sortable="true"></PropertyColumn>
                <PropertyColumn Property="@(t => t.Task)" Title="Опис"></PropertyColumn>
                <PropertyColumn Property="@(t => t.Price)" Title="Ціна"></PropertyColumn>

                <TemplateColumn Title="Статус" Context="taskContext">
                    @taskContext.Status
                    <select value="taskContext.Status" @onchange="(e) => UpdateTaskStatus(taskContext.Id, e.Value.ToString())">
                        <option value="Pending">Pending</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Completed">Completed</option>
                    </select>
                </TemplateColumn>

                <TemplateColumn Title="Механік" Context="taskContext">
                    @if (taskContext.MechanicId != null)
                    {
                        var mech = mechanics.FirstOrDefault(p => p.Id == taskContext.MechanicId);
                        <span>@(mech != null ? mech.UserName : "Механік не знайдений")</span>
                    }
                    else
                    {
                        <span>Механік не вказаний</span>
                    }
                </TemplateColumn>

                @* Conditionally render these columns based on roles *@
                @if (isAdminOrMechanic)
                {
                    <TemplateColumn Title="Перейти до завдання" Context="taskContext">
                        <button class="btn btn-info" @onclick="() => NavigateToTask(taskContext.Id)">Перейти</button>
                    </TemplateColumn>
                    <TemplateColumn Title="Дії" Context="taskContext">
                        <button class="btn btn-danger" @onclick="() => DeleteTask(taskContext.Id)">Видалити</button>
                    </TemplateColumn>
                }
            </QuickGrid>


        </div>

        @if (job.OrderId != null)
        {
            <div class="parts-list mt-4">
                <h4>Список запчастин</h4>
                <QuickGrid Items="@partViewModelsQueryable" Class="table table-striped">
                    <PropertyColumn Property="@(t => t.PartName)" Title="Назва" Sortable="true"></PropertyColumn>
                    <PropertyColumn Property="@(t => new string(t.Description.Take(70).ToArray()) + "...")" Title="Опис"></PropertyColumn>
                    <PropertyColumn Property="@(t => t.ManufacturerNumber)" Title="Номер"></PropertyColumn>
                    <PropertyColumn Property="@(t => t.PriceRegular)" Title="Ціна"></PropertyColumn>
                    <AuthorizeView Roles="Admin,Mechanic">
                        <ChildContent Context="authContext">
                            <TemplateColumn Title="Дії">
                                <button class="btn btn-danger" @onclick="() => DeletePart(context.Id.Value)">Видалити</button>
                            </TemplateColumn>
                        </ChildContent>
                    </AuthorizeView>
                </QuickGrid>

            </div>
        }
    </div>
}
else
{
    <p>Завантаження...</p>
}

@code {

    [Microsoft.AspNetCore.Components.Parameter]
    public Guid jobId { get; set; }
    private bool isAdminOrMechanic;
    private JobVM job;
    private OrderViewModel? order;
    private List<TaskViewModel> tasks;
    private string errorMessage;
    private List<MechanicViewModel> mechanics;
    private List<VehicleViewModel> Vehicles;
    private List<PartViewModel> parts;

    private IQueryable<TaskViewModel> taskViewModelsQueryable = Enumerable.Empty<TaskViewModel>().AsQueryable();
    private IQueryable<PartViewModel> partViewModelsQueryable = Enumerable.Empty<PartViewModel>().AsQueryable();


    string SelectedAccount { get; set; }
    long SelectedChainId { get; set; }
    string BlockHash { get; set; }
    IEthereumHostProvider _ethereumHostProvider;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdminOrMechanic = user.IsInRole("Admin") || user.IsInRole("Mechanic");
        try
        {
            job = await JobService.GetJobById(jobId);

            var veh = await VehicleService.GetById(job.VehicleId.Value);
            job.ModelName = veh.fullModelName;

            if (job == null)
            {
                errorMessage = "Робота не знайдена.";
            }
            else
            {
                var mechanicVMs = await UserService.GetMechanics();
                var tasksVMs = await TasksService.GetTasksByJobId(job.Id.Value);

                if (tasksVMs != null && tasksVMs.Any())
                {
                    tasks = tasksVMs.ToList();
                    taskViewModelsQueryable = tasks.AsQueryable();
                }

                if (job.OrderId.HasValue)
                {
                    order = await OrderService.GetOrderByIdAsync(job.OrderId.Value);
                    var partsVMs = await PartsService.GetPartsByOrderIdAsync(job.OrderId.Value);
                    partViewModelsQueryable = partsVMs.ToList().AsQueryable();

                }

                var Vehiclesvms = await VehicleService.GetCarModelsAsync();
                mechanics = mechanicVMs.ToList();
                Vehicles = Vehiclesvms.ToList();
            }
            _ethereumHostProvider = selectedHostProviderService.SelectedHost;
            if (_ethereumHostProvider != null)
            {
                _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
                _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
                _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження деталей роботи: {ex.Message}";
        }
    }
    public void Dispose()
    {           
        if (_ethereumHostProvider != null)
        {
            _ethereumHostProvider.SelectedAccountChanged -= HostProvider_SelectedAccountChanged;
            _ethereumHostProvider.NetworkChanged -= HostProvider_NetworkChanged;
            _ethereumHostProvider.EnabledChanged -= HostProviderOnEnabledChanged;
        }
    }

    private void AddTask(Guid? jobId)
    {
        NavigationManager.NavigateTo($"/tasks/add?JobId={jobId}");
    }

    private async void AddOrder()
    {

        var res = await OrderService.GetNewOrder(job.ClientId.Value);
        job.OrderId = res.Id;
        await JobService.AddOrder(job.Id.Value, res.Id.Value);


        NavigationManager.NavigateTo($"/orders/{res.Id}");
    }
    private async void NavtoOrder()
    {

        NavigationManager.NavigateTo($"/orders/{job.OrderId}");
    }

    private void NavigateToTask(Guid taskId)
    {
        NavigationManager.NavigateTo($"/tasks/edit/{taskId}?JobId={jobId}");
    }

    private async Task UpdateTaskStatus(Guid id, string status)
    {
        try
        {

            // Оновлення статусу завдання через сервіс
            await TasksService.UpdateTaskStatus(id, status.Replace(" ",""));

            // Оновлення списку завдань після зміни статусу
            await RefreshTaskList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка оновлення статусу завдання: {ex.Message}";
        }
    }


    private async Task DeleteTask(Guid taskId)
    {
        try
        {
            await TasksService.DeleteTask(taskId);
            tasks = (await TasksService.GetTasksByJobId(job.Id.Value)).ToList();
            taskViewModelsQueryable = tasks.AsQueryable();

        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка видалення завдання: {ex.Message}";
        }
    }
    private async Task DeletePart(Guid partid)
    {
        try
        {
            await OrderService.RemovePartFromOrderAsync(job.OrderId.Value, partid);
            var partsVMs = await PartsService.GetPartsByOrderIdAsync(job.OrderId.Value);
            partViewModelsQueryable = partsVMs.ToList().AsQueryable();

        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка видалення запчастини: {ex.Message}";
        }
    }
    private async Task RefreshTaskList()
    {
        try
        {
            // Отримання оновленого списку завдань
            var tasksVMs = await TasksService.GetTasksByJobId(job.Id.Value);

            if (tasksVMs != null && tasksVMs.Any())
            {
                tasks = tasksVMs.ToList();
                taskViewModelsQueryable = tasks.AsQueryable();
            }
            else
            {
                tasks = new List<TaskViewModel>();
                taskViewModelsQueryable = tasks.AsQueryable();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка оновлення списку завдань: {ex.Message}";
        }
    }


    private async Task PayOrder()
    {
        try
        {
            var web3 = await _ethereumHostProvider.GetWeb3Async();
            var serv = new ServiceCenterPaymentServiceBase(web3, "0x5fbdb2315678afecb367f032d93f642f64180aa3");

            // Отримуємо замовлення
            var ord = await OrderService.GetOrderByIdAsync(job.OrderId.Value);
            if (!ord.OrderIndex.HasValue)
            {
                errorMessage = "Зачекайте обробки замовлення блокчейном";
               
                this.StateHasChanged();
                return;
            }

            if(ord.IsPaid == true){
                errorMessage = "Замовлення оплачене";
                               
                this.StateHasChanged();
                return;
            }
            // Перевіряємо чи можна спарсити ціну
            if (!BigInteger.TryParse(ord.WEIPrice, out var amountToSend))
            {
                errorMessage = "Некоректна сума для платежу";               
                this.StateHasChanged();
                return;
            }

            // Отримуємо адресу першого доступного акаунта
            var accounts = await web3.Eth.Accounts.SendRequestAsync();
            if (accounts == null || accounts.Length == 0)
            {
                errorMessage = "Не знайдено жодного акаунта";
                this.StateHasChanged();
                return;
            }

            var fromAddress = accounts[0];

            // Отримуємо актуальний nonce для транзакції
            var nonce = await web3.Eth.Transactions.GetTransactionCount.SendRequestAsync(fromAddress);

            // Відправляємо транзакцію
            var tr = await serv.PayOrderRequestAndWaitForReceiptAsync(new PayOrderFunction()
                {
                    Nonce = (BigInteger)nonce.Value, // Встановлюємо коректний nonce
                    AmountToSend = amountToSend,
                    FromAddress = fromAddress,
                    OrderIndex = (BigInteger)ord.OrderIndex
                });
        }
        catch (Exception e)
        {
            errorMessage = $"Помилка надсилання коштів: {e.Message}";
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }



    private async void PayJob()
    {
        try
        {
            var web3 = await _ethereumHostProvider.GetWeb3Async();
            var serv = new ServiceCenterPaymentServiceBase(web3, "0x5fbdb2315678afecb367f032d93f642f64180aa3");

            // Отримуємо замовлення
            var jb = await JobService.GetJobById(job.Id.Value);
            if (!jb.jobIndex.HasValue)
            {
                errorMessage = "Зачекайте обробки роботи блокчейном";
                this.StateHasChanged();
                return;
            }

            if (jb.IsPaid == true)
            {
                errorMessage = "Робота оплачена";
                this.StateHasChanged();
                return;
            }
            // Перевіряємо чи можна спарсити ціну
            if (!BigInteger.TryParse(jb.WEIPrice, out var amountToSend))
            {
                errorMessage = "Некоректна сума для платежу";               
                this.StateHasChanged();
                return;
            }

            // Отримуємо адресу першого доступного акаунта
            var accounts = await web3.Eth.Accounts.SendRequestAsync();
            if (accounts == null || accounts.Length == 0)
            {
                errorMessage = "Не знайдено жодного акаунта";
                this.StateHasChanged();
                return;
            }

            var fromAddress = accounts[0];

            // Отримуємо актуальний nonce для транзакції
            var nonce = await web3.Eth.Transactions.GetTransactionCount.SendRequestAsync(fromAddress);

            // Відправляємо транзакцію
            var tr = await serv.PayJobRequestAndWaitForReceiptAsync(new PayJobFunction()
                {
                    Nonce = (BigInteger)nonce.Value, // Встановлюємо коректний nonce
                    AmountToSend = amountToSend,
                    FromAddress = fromAddress,
                    JobIndex = (BigInteger)jb.jobIndex
                });
        }
        catch (Exception e)
        {
            errorMessage = $"Помилка надсилання коштів: {e.Message}";
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }

    private async Task HostProviderOnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            this.StateHasChanged();
           
        }
    }

    private async Task GetChainId()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        SelectedChainId = (int)chainId.Value;
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        await GetChainId();
        this.StateHasChanged();
    }

    private async Task HostProvider_NetworkChanged(long chainId)
    {
        SelectedChainId = chainId;
        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }
}