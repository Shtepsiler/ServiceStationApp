@page "/retraining/parts"
@using BlazorApp.Extensions.ViewModels.CatalogVMs
@using BlazorApp.Extensions.ViewModels.PPModel
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject IPartsMLService PartsMLService
@inject IJSRuntime JS
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "Admin, Mechanic")]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="retraining-page">
<style>
        .spinning {
            animation: spin 2s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .confidence-badge {
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.8em;
        }

        .confidence-high {
            background-color: #d4edda;
            color: #155724;
        }

        .confidence-medium {
            background-color: #fff3cd;
            color: #856404;
        }

        .confidence-low {
            background-color: #f8d7da;
            color: #721c24;
        }

        .uncertain-sample {
            position: relative;
            z-index: 1;
        }

            .uncertain-sample:has(.dropdown.show) {
                z-index: 1050 !important;
            }

            /* Fallback для старих браузерів */
            .uncertain-sample .dropdown.show {
                z-index: 1050;
            }
    </style>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/retraining">Перетренування</a></li>
        <li class="breadcrumb-item active" aria-current="page">Автозапчастини</li>
    </ol>
</nav>

<h3>Перетренування Моделі Автозапчастин</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Завантаження...</span>
        </div>
        <p class="mt-2">Завантаження даних...</p>
    </div>
}
else
{
    <!-- Enhanced Health Check -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Стан Системи</h5>
            <button class="btn btn-outline-primary btn-sm" @onclick="LoadHealthStatus">
                <i class="fas fa-heartbeat"></i> Перевірити
            </button>
        </div>
        <div class="card-body">
            @if (healthStatus != null)
            {
                <div class="row">
                    <div class="col-md-2">
                        <div class="text-center">
                            <i class="fas fa-circle text-@(GetStatusColor(healthStatus.status)) fa-2x"></i>
                            <p class="mt-2 mb-0">@healthStatus.status.ToUpper()</p>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <i class="fas fa-@(healthStatus.ml_model_loaded ? "check-circle text-success" : "times-circle text-danger") fa-2x"></i>
                            <p class="mt-2 mb-0">Модель</p>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <i class="fas fa-@(healthStatus.redis_connected ? "database text-success" : "database text-danger") fa-2x"></i>
                            <p class="mt-2 mb-0">Redis</p>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <i class="fas fa-@(healthStatus.gpu_available == true ? "microchip text-success" : "microchip text-muted") fa-2x"></i>
                            <p class="mt-2 mb-0">GPU</p>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <h5 class="text-info">@healthStatus.version</h5>
                            <p class="mb-0">Версія</p>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            @if (healthStatus.uptime_seconds.HasValue)
                            {
                                <h6 class="text-muted">@TimeSpan.FromSeconds(healthStatus.uptime_seconds.Value).ToString(@"hh\:mm\:ss")</h6>
                                <p class="mb-0">Uptime</p>
                            }
                        </div>
                    </div>
                </div>

                @if (healthStatus.environment != null)
                {
                    <div class="mt-3">
                        <h6>Середовище:</h6>
                        <div class="row">
                            @foreach (var env in healthStatus.environment)
                            {
                                <div class="col-md-4">
                                    <small><strong>@env.Key:</strong> @env.Value</small>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Enhanced Model Status with Retraining Info -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Статус Перетренування</h5>
            <div>
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="LoadRetrainStatus">
                    <i class="fas fa-sync-alt"></i> Оновити
                </button>
                <button class="btn btn-success btn-sm" @onclick="TriggerRetrain" disabled="@isRetriggering">
                    @if (isRetriggering)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="fas fa-play-circle"></i> Запустити
                </button>
            </div>
        </div>
        <div class="card-body">
            @if (retrainStatus != null)
            {
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6>Можливість Перетренування:</h6>
                        <div class="alert alert-@(retrainStatus.retrain_eligibility.eligible ? "success" : "warning")">
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Статус:</strong> @(retrainStatus.retrain_eligibility.eligible ? "✅ Готово" : "⏳ Не готово")
                                </div>
                                <div class="col-md-6">
                                    <strong>В процесі:</strong> @(currentTrainingProgress?.status == "training" ||
                                                                  currentTrainingProgress?.status == "preparing_data" ||
                                                                  currentTrainingProgress?.status == "starting" ? "🔄 Так" : "⏸️ Ні")
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(retrainStatus.retrain_eligibility.reason))
                            {
                                <div class="mt-2">
                                    <small><strong>Причина:</strong> @retrainStatus.retrain_eligibility.reason</small>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="col-md-6">
                        <h6>Статистика Активного Навчання:</h6>
                        <div class="row text-center">
                            @if (retrainStatus.learning_statistics.current_counts != null)
                            {
                                <div class="col-4">
                                    <h5 class="text-primary">@retrainStatus.learning_statistics.current_counts.feedback_received</h5>
                                    <small>Всього відгуків</small>
                                </div>
                                <div class="col-4">
                                    <h5 class="text-success">@retrainStatus.learning_statistics.current_counts.predictions_stored</h5>
                                    <small>Передбачень</small>
                                </div>
                                <div class="col-4">
                                    <h5 class="text-danger">@retrainStatus.learning_statistics.current_counts.uncertainty_queue_size</h5>
                                    <small>Невизначених</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Real-time Training Progress -->
                @if (currentTrainingProgress != null &&
                     (currentTrainingProgress.status == "training" ||
                      currentTrainingProgress.status == "preparing_data" ||
                      currentTrainingProgress.status == "starting" ||
                      currentTrainingProgress.status == "backing_up_model" ||
                      currentTrainingProgress.status == "preparing_model" ||
                      currentTrainingProgress.status == "creating_model" ||
                      currentTrainingProgress.status == "validating" ||
                      currentTrainingProgress.status == "deploying"))
                {
                    <div class="alert alert-info">
                        <h6><i class="fas fa-cogs spinning"></i> Прогрес Перетренування</h6>

                        <div class="row mb-2">
                            <div class="col-md-4">
                                <strong>Статус:</strong> @GetTrainingStatusText(currentTrainingProgress.status)
                            </div>
                            <div class="col-md-4">
                                <strong>Стратегія:</strong> @currentTrainingProgress.strategy
                            </div>
                            <div class="col-md-4">
                                <strong>Дані:</strong> @currentTrainingProgress.data_size зразків
                            </div>
                        </div>

                        @if (currentTrainingProgress.status == "training" && currentTrainingProgress.epochs_total > 0)
                        {
                            <div class="mb-2">
                                <div class="d-flex justify-content-between">
                                    <span>Епоха @currentTrainingProgress.epoch_current / @currentTrainingProgress.epochs_total</span>
                                    <span>@((currentTrainingProgress.epoch_current / (double)currentTrainingProgress.epochs_total).ToString("P0"))</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated"
                                         style="width: @((currentTrainingProgress.epoch_current / (double)currentTrainingProgress.epochs_total * 100))%">
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <small><strong>Train Loss:</strong> @currentTrainingProgress.train_loss.ToString("F4")</small>
                                </div>
                                <div class="col-md-6">
                                    <small><strong>Val Accuracy:</strong> @currentTrainingProgress.val_accuracy.ToString("P2")</small>
                                </div>
                            </div>
                        }

                        @if (currentTrainingProgress.baseline_performance > 0)
                        {
                            <div class="mt-2">
                                <small><strong>Baseline Performance:</strong> @currentTrainingProgress.baseline_performance.ToString("P2")</small>
                            </div>
                        }

                        <div class="mt-2">
                            <small class="text-muted">
                                Почато: @DateTime.Parse(currentTrainingProgress.start_time).ToString("HH:mm:ss")
                                @if (currentTrainingProgress.training_time > 0)
                                {
                                    <span> | Тривалість: @TimeSpan.FromSeconds(currentTrainingProgress.training_time).ToString(@"mm\:ss")</span>
                                }
                            </small>
                        </div>
                    </div>
                }

                @if (lastRetrainTrigger != null)
                {
                    <div class="alert alert-@(lastRetrainTrigger.success ? "success" : "danger")">
                        <h6>Останній запуск перетренування:</h6>
                        <p><strong>Результат:</strong> @(lastRetrainTrigger.success ? "✅ Успішно" : "❌ Помилка")</p>
                        @if (!string.IsNullOrEmpty(lastRetrainTrigger.message))
                        {
                            <p><strong>Повідомлення:</strong> @lastRetrainTrigger.message</p>
                        }
                        @if (!string.IsNullOrEmpty(lastRetrainTrigger.error))
                        {
                            <p><strong>Помилка:</strong> @lastRetrainTrigger.error</p>
                        }
                        @if (lastRetrainTrigger.baseline_performance > 0)
                        {
                            <p><strong>Baseline Performance:</strong> @lastRetrainTrigger.baseline_performance.ToString("P2")</p>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <!-- Uncertain Samples Section -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Невизначені Зразки для Розмітки</h5>
            <div class="d-flex align-items-center">
                <label for="sampleLimit" class="me-2">Ліміт:</label>
                <input id="sampleLimit"
                       type="range"
                       min="1"
                       max="50"
                       step="1"
                       value="@sampleLimit"
                       @oninput="(e) => sampleLimit = int.Parse(e.Value?.ToString())"
                       class="form-range me-2"
                       style="width: 100px;" />
                <span class="badge bg-info">@sampleLimit</span>
            </div>
        </div>
        <div class="card-body">
            <button class="btn btn-primary mb-3" @onclick="LoadUncertainSamples" disabled="@isLoadingUncertain">
                @if (isLoadingUncertain)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="fas fa-question-circle"></i> Завантажити Невизначені Зразки
            </button>

            @if (uncertainSamplesResponse?.samples?.Count == 0)
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> @(uncertainSamplesResponse?.message ?? "Немає невизначених зразків або вони ще не завантажені.")
                </div>
            }
            else if (uncertainSamplesResponse?.samples != null)
            {
                <div class="alert alert-success mb-3">
                    <i class="fas fa-info-circle"></i> Знайдено @uncertainSamplesResponse.count невизначених зразків
                </div>

                @foreach (var sample in uncertainSamplesResponse.samples)
                {
                    <div class="card mb-3 uncertain-sample" @key="sample.prediction_id" style="position: relative; z-index: @(1000 + uncertainSamplesResponse.samples.IndexOf(sample));">                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-7">
                                    <h6>Опис проблеми:</h6>
                                    <p class="p-2 bg-light rounded problem-description">@sample.problem_description</p>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <small class="text-muted">
                                                <i class="fas fa-chart-line"></i> Впевненість:
                                                <span class="confidence-badge confidence-@(GetConfidenceLevel(sample.confidence))">
                                                    @sample.confidence.ToString("P2")
                                                </span>
                                            </small>
                                        </div>
                                        <div class="col-md-6">
                                            <small class="text-muted">
                                                <i class="fas fa-clock"></i> @sample.timestamp
                                            </small>
                                        </div>
                                    </div>

                                    @if (sample.predictions != null && sample.predictions.Any())
                                    {
                                        <h6 class="mt-2">Поточні передбачення:</h6>
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var pred in sample.predictions.Take(3))
                                            {
                                                <span class="badge bg-secondary">@pred.part - @pred.confidence.ToString("P1")</span>
                                            }
                                        </div>
                                    }
                                </div>

                                <div class="col-md-5">
                                    <label class="form-label">
                                        <strong>Правильні категорії запчастин:</strong>
                                    </label>

                                    <!-- Category Selection Dropdown with Search -->
                                    <div class="dropdown mb-2">
                                        <button class="btn btn-outline-secondary dropdown-toggle w-100"
                                                type="button"
                                                data-bs-toggle="dropdown"
                                                data-bs-auto-close="outside"
                                                disabled="@(activeDropdownId != null && activeDropdownId != sample.prediction_id)">
                                            <i class="fas fa-plus"></i> Обрати категорію
                                        </button>
                                        <div class="dropdown-menu w-100 p-2" 
                                             style="max-height: 350px; overflow-y: auto; width: 100%;"
                                             @onclick:stopPropagation="true">
                                            <div class="mb-2">
                                                <input type="text"
                                                       class="form-control form-control-sm"
                                                       placeholder="Пошук категорії..."
                                                       value="@GetCategorySearchTerm(sample.prediction_id)"
                                                       @oninput="@(e => SetCategorySearchTerm(sample.prediction_id, e.Value?.ToString() ?? ""))"
                                                       @onclick:stopPropagation="true"
                                                       @onkeydown:stopPropagation="true" />
                                            </div>
                                            <div class="dropdown-divider"></div>

                                            @{
                                                var filteredCategories = GetFilteredCategories(sample.prediction_id);
                                            }

                                            @if (!filteredCategories.Any())
                                            {
                                                <div class="dropdown-item-text text-muted">
                                                    <i class="fas fa-search"></i> Нічого не знайдено
                                                </div>
                                            }
                                            else
                                            {
                                                @foreach (var category in filteredCategories)
                                                {
                                                    <button class="dropdown-item @(IsCategorySelected(sample.prediction_id, category.Id.Value) ? "disabled" : "")"
                                                            type="button"
                                                            @onclick="() => AddCategoryToSample(sample.prediction_id, category)"
                                                            @onclick:stopPropagation="true"
                                                            disabled="@IsCategorySelected(sample.prediction_id, category.Id.Value)">
                                                        <i class="fas fa-tag me-2"></i>
                                                        @GetCategoryDisplayName(category)
                                                        @if (IsCategorySelected(sample.prediction_id, category.Id.Value))
                                                        {
                                                            <i class="fas fa-check text-success ms-2"></i>
                                                        }
                                                    </button>
                                                }
                                                <div class="dropdown-item-text text-muted text-center">
                                                    <small>Показано @filteredCategories.Count() результатів</small>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Selected Categories Display -->
                                    <div class="selected-categories mb-2">
                                        @if (GetSelectedCategories(sample.prediction_id).Any())
                                        {
                                            <label class="form-label">Обрані категорії:</label>
                                            <div class="d-flex flex-wrap gap-1">
                                                @foreach (var categoryId in GetSelectedCategories(sample.prediction_id))
                                                {
                                                    var category = GetCategoryById(categoryId);
                                                    if (category != null)
                                                    {
                                                        <span class="badge bg-primary d-flex align-items-center">
                                                            @category.Title
                                                            <button type="button"
                                                                    class="btn-close btn-close-white ms-1"
                                                                    style="font-size: 0.7em;"
                                                                    @onclick="() => RemoveCategoryFromSample(sample.prediction_id, categoryId)">
                                                            </button>
                                                        </span>
                                                    }
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Оберіть хоча б одну категорію</small>
                                        }
                                    </div>

                                    <!-- Action Buttons -->
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-success btn-sm flex-fill"
                                                @onclick="() => SubmitUncertainCategories(sample.prediction_id, true)"
                                                disabled="@(!GetSelectedCategories(sample.prediction_id).Any())">
                                            <i class="fas fa-check"></i> Підтвердити
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm"
                                                @onclick="() => RemoveUncertainSample(sample.prediction_id)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>

                                    @if (GetPopularCategories().Any())
                                    {
                                        <div class="mt-2">
                                            <small class="text-muted">Популярні категорії:</small>
                                            <div class="d-flex flex-wrap gap-1 mt-1">
                                                @foreach (var popular in GetPopularCategories().Take(3))
                                                {
                                                    <button class="btn btn-outline-primary btn-sm"
                                                            @onclick="() => AddCategoryToSample(sample.prediction_id, popular)"
                                                            disabled="@IsCategorySelected(sample.prediction_id, popular.Id.Value)">
                                                        @popular.Title
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Enhanced Test Prediction -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Тестування Передбачень</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-8">
                    <label class="form-label">Опис проблеми:</label>
                    <textarea class="form-control" @bind="testPrediction.problem_description" rows="3"
                                  placeholder="Опишіть проблему з автомобілем (мінімум 10 символів)..."></textarea>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Мова:</label>
                    <select class="form-select mb-2" @bind="testPrediction.language">
                        <option value="uk">Українська</option>
                        <option value="en">Англійська</option>
                        <option value="auto">Авто-визначення</option>
                    </select>

                    <label class="form-label">Кількість результатів:</label>
                    <input type="number" class="form-control mb-2" @bind="testPrediction.top_k" min="1" max="10" />

                    <label class="form-label">Поріг впевненості:</label>
                    <input type="number" class="form-control mb-2" @bind="testPrediction.confidence_threshold"
                           min="0.1" max="1.0" step="0.1" />

                    <div class="form-check">
                        <InputCheckbox @bind-Value="testPrediction.include_explanations" class="form-check-input" id="explanationsCheck" />
                        <label class="form-check-label" for="explanationsCheck">
                            Включити пояснення
                        </label>
                    </div>
                </div>
            </div>

            <button class="btn btn-success" @onclick="TestPrediction" disabled="@isTestingPrediction">
                @if (isTestingPrediction)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="fas fa-play"></i> Тестувати Передбачення
            </button>

            @if (lastPredictionResponse != null)
            {
                <div class="mt-4 alert alert-info">
                    <div class="row">
                        <div class="col-md-8">
                            <h6><i class="fas fa-chart-bar"></i> Результати Передбачення:</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>ID:</strong> <code>@lastPredictionResponse.prediction_id</code></p>
                                    <p><strong>Час обробки:</strong> @lastPredictionResponse.processing_time.ToString("F3")с</p>
                                    <p><strong>Впевненість:</strong> @lastPredictionResponse.confidence_score.ToString("P2")</p>
                                    <p><strong>З кешу:</strong> @(lastPredictionResponse.cached ? "✅" : "❌")</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Версія моделі:</strong> @lastPredictionResponse.ml_model_version</p>
                                    @if (!string.IsNullOrEmpty(lastPredictionResponse.language_detected))
                                    {
                                        <p><strong>Визначена мова:</strong> @lastPredictionResponse.language_detected</p>
                                    }
                                    <p><strong>Час:</strong> @lastPredictionResponse.timestamp.ToString("HH:mm:ss")</p>
                                </div>
                            </div>

                            <h6 class="mt-3"><i class="fas fa-cogs"></i> Передбачені Запчастини:</h6>
                            <div class="list-group">
                                @foreach (var pred in lastPredictionResponse.predictions)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@pred.part_name</strong>
                                            @if (!string.IsNullOrEmpty(pred.category))
                                            {
                                                <small class="text-muted">(@pred.category)</small>
                                            }
                                            @if (!string.IsNullOrEmpty(pred.explanation))
                                            {
                                                <br>
                                                <small class="text-muted">@pred.explanation</small>
                                            }
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-primary rounded-pill">@pred.confidence.ToString("P2")</span>
                                            @if (pred.estimated_cost.HasValue)
                                            {
                                                <br>
                                                <small class="text-muted">~@pred.estimated_cost.Value.ToString("C")</small>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-md-4">
                            <h6>Швидкий зворотний зв'язок:</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-success"
                                        @onclick="() => QuickFeedback(lastPredictionResponse.prediction_id, 5, true)">
                                    <i class="fas fa-thumbs-up"></i> Відмінно (5⭐)
                                </button>
                                <button class="btn btn-outline-primary"
                                        @onclick="() => QuickFeedback(lastPredictionResponse.prediction_id, 4, true)">
                                    <i class="fas fa-check"></i> Добре (4⭐)
                                </button>
                                <button class="btn btn-outline-warning"
                                        @onclick="() => QuickFeedback(lastPredictionResponse.prediction_id, 3, false)">
                                    <i class="fas fa-meh"></i> Задовільно (3⭐)
                                </button>
                                <button class="btn btn-outline-danger"
                                        @onclick="() => QuickFeedback(lastPredictionResponse.prediction_id, 2, false)">
                                    <i class="fas fa-thumbs-down"></i> Погано (2⭐)
                                </button>
                            </div>

                            <div class="mt-3">
                                <label class="form-label">Правильні запчастини:</label>
                                <input type="text" class="form-control mb-2" @bind="quickFeedbackParts"
                                       placeholder="запчастина1, запчастина2..." />
                                <button class="btn btn-sm btn-secondary w-100"
                                        @onclick="() => QuickFeedbackWithParts(lastPredictionResponse.prediction_id)">
                                    <i class="fas fa-paper-plane"></i> Відправити з запчастинами
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Enhanced Metrics Dashboard -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Панель Метрик</h5>
            <div>
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="LoadMetrics">
                    <i class="fas fa-chart-line"></i> Оновити
                </button>
                <button class="btn btn-outline-warning btn-sm" @onclick="ClearCache">
                    <i class="fas fa-broom"></i> Очистити Кеш
                </button>
            </div>
        </div>
        <div class="card-body">
            @if (metrics != null)
            {
                <div class="row text-center mb-3">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <h4>@metrics.predictions_total</h4>
                                <small>Всього передбачень</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <h4>@metrics.feedback_total</h4>
                                <small>Зворотний зв'язок</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <h4>@metrics.cache_hit_rate.ToString("P1")</h4>
                                <small>Влучення кешу</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <h4>@metrics.feedback_ratio.ToString("P1")</h4>
                                <small>Коефіцієнт відгуків</small>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <h6>Система:</h6>
                        <ul class="list-unstyled">
                            <li><i class="fas fa-@(metrics.model_loaded ? "check text-success" : "times text-danger")"></i> Модель: @(metrics.model_loaded ? "Завантажена" : "Не завантажена")</li>
                            <li><i class="fas fa-@(metrics.redis_available ? "check text-success" : "times text-danger")"></i> Redis: @(metrics.redis_available ? "Доступний" : "Недоступний")</li>
                            <li><i class="fas fa-@(metrics.active_learning_available ? "check text-success" : "times text-danger")"></i> Активне навчання: @(metrics.active_learning_available ? "Активне" : "Неактивне")</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>Кеш:</h6>
                        <ul class="list-unstyled">
                            <li><strong>Влучення:</strong> @metrics.cache_hits</li>
                            <li><strong>Промахи:</strong> @metrics.cache_misses</li>
                            <li><strong>Uptime:</strong> @TimeSpan.FromSeconds(metrics.uptime_seconds).ToString(@"dd\.hh\:mm\:ss")</li>
                        </ul>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center text-muted">
                    <i class="fas fa-chart-line fa-3x"></i>
                    <p class="mt-2">Натисніть "Оновити" для завантаження метрик</p>
                </div>
            }
        </div>
    </div>

    <!-- Manual Feedback Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Ручний Зворотний Зв'язок</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">ID Передбачення:</label>
                    <input type="text" class="form-control" @bind="manualFeedback.prediction_id" placeholder="Введіть ID передбачення" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Рейтинг (1-5):</label>
                    <select class="form-select" @bind="manualFeedback.user_rating">
                        <option value="">Оберіть рейтинг</option>
                        <option value="1">1 - Дуже погано</option>
                        <option value="2">2 - Погано</option>
                        <option value="3">3 - Задовільно</option>
                        <option value="4">4 - Добре</option>
                        <option value="5">5 - Відмінно</option>
                    </select>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Правильні запчастини (через кому):</label>
                <input type="text" class="form-control" @bind="correctPartsInput" placeholder="запчастина1, запчастина2, запчастина3" />
            </div>

            <div class="mb-3">
                <label class="form-label">Коментарі:</label>
                <textarea class="form-control" @bind="manualFeedback.comments" rows="3" placeholder="Додаткові коментарі..."></textarea>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="manualFeedback.is_correct_prediction" class="form-check-input" id="correctCheck" />
                        <label class="form-check-label" for="correctCheck">
                            Передбачення було правильним
                        </label>
                    </div>
                </div>
                <div class="col-md-6">
                    <label class="form-label">User ID (опціонально):</label>
                    <input type="text" class="form-control" @bind="manualFeedback.user_id" placeholder="ID користувача" />
                </div>
            </div>

            <button class="btn btn-primary" @onclick="SubmitManualFeedback" disabled="@isSubmittingManual">
                @if (isSubmittingManual)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="fas fa-paper-plane"></i> Відправити Зворотний Зв'язок
            </button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger mt-3">
        <i class="fas fa-exclamation-triangle"></i> @message
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">
        <i class="fas fa-check-circle"></i> @successMessage
    </div>
}

@code {
    // Enhanced state variables
    private HealthResponse? healthStatus;
    private ModelStatus? modelStatus;
    private RetrainStatusResponse? retrainStatus;
    private RetrainTriggerResponse? lastRetrainTrigger;
    private TrainingProgress? currentTrainingProgress;
    private UncertainSamplesResponse? uncertainSamplesResponse;
    private FeedbackRequest manualFeedback = new();
    private PredictionRequest testPrediction = new() { language = "uk", top_k = 5 };
    private PredictionResponse? lastPredictionResponse;
    private MetricsResponse? metrics;

    // UI state
    private Dictionary<string, string> uncertainLabels = new();
    private string correctPartsInput = "";
    private string quickFeedbackParts = "";
    private int sampleLimit = 10;

    // Loading states
    private bool isLoading = true;
    private bool isLoadingUncertain = false;
    private bool isSubmittingUncertain = false;
    private bool isSubmittingManual = false;
    private bool isTestingPrediction = false;
    private bool isRetriggering = false;

    // Messages
    private string message = "";
    private string successMessage = "";

    // Category-related state
    private Dictionary<string, List<Guid>> uncertainSampleCategories = new();
    private List<CategoryViewModel> categories = new();
    private Dictionary<string, string> categorySearchTerms = new();

    // Popular categories configuration
    private readonly string[] popularCategoryNames = { "Двигун", "Гальма", "Підвіска", "Електрика" };

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();

        // Start progress monitoring if retrain is in progress
        _ = Task.Run(MonitorTrainingProgress);
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        ClearMessages();

        try
        {
            await Task.WhenAll(
                LoadHealthStatus(),
                LoadModelStatus(),
                LoadRetrainStatus(),
                LoadCategories()
            );
        }
        catch (Exception e)
        {
            message = $"Помилка ініціалізації: {e.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task MonitorTrainingProgress()
    {
        while (true)
        {
            try
            {
                if (retrainStatus?.retrain_eligibility?.progress != null ||
                    currentTrainingProgress != null)
                {
                    // Check if training is in progress
                    var progress = await PartsMLService.GetTrainingProgress();
                    if (progress != null)
                    {
                        currentTrainingProgress = progress;

                        // Update UI if training status changed
                        await InvokeAsync(StateHasChanged);

                        // Stop monitoring if training completed/failed
                        if (progress.status == "completed" ||
                            progress.status == "failed" ||
                            progress.status == "error")
                        {
                            await LoadRetrainStatus();
                            await InvokeAsync(StateHasChanged);
                            break;
                        }
                    }
                }

                await Task.Delay(2000); // Check every 2 seconds
            }
            catch (Exception)
            {
                // Silent fail - monitoring is not critical
                await Task.Delay(5000);
            }
        }
    }

    private async Task LoadHealthStatus()
    {
        try
        {
            healthStatus = await PartsMLService.GetHealth();
        }
        catch (Exception e)
        {
            message = $"Помилка завантаження стану системи: {e.Message}";
        }
    }

    private async Task LoadModelStatus()
    {
        try
        {
            modelStatus = await PartsMLService.GetStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка завантаження статистики моделі: {e.Message}";
        }
    }

    private async Task LoadRetrainStatus()
    {
        try
        {
            retrainStatus = await PartsMLService.GetRetrainStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка завантаження статусу перетренування: {e.Message}";
        }
    }

    private async Task TriggerRetrain()
    {
        isRetriggering = true;
        ClearMessages();

        try
        {
            lastRetrainTrigger = await PartsMLService.TriggerRetrain();

            if (lastRetrainTrigger.success)
            {
                successMessage = "Перетренування успішно запущено!";
                currentTrainingProgress = lastRetrainTrigger.progress;
            }
            else
            {
                message = $"Помилка запуску: {lastRetrainTrigger.error ?? lastRetrainTrigger.message}";
            }

            await LoadRetrainStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка запуску перетренування: {e.Message}";
        }
        finally
        {
            isRetriggering = false;
            StateHasChanged();
        }
    }

    private async Task LoadUncertainSamples()
    {
        isLoadingUncertain = true;
        ClearMessages();

        try
        {
            uncertainSamplesResponse = await PartsMLService.GetUncertainSamples(sampleLimit);
            uncertainLabels.Clear();

            if (uncertainSamplesResponse.count > 0)
            {
                successMessage = $"Завантажено {uncertainSamplesResponse.count} невизначених зразків";
            }
        }
        catch (Exception e)
        {
            message = $"Помилка завантаження невизначених зразків: {e.Message}";
        }
        finally
        {
            isLoadingUncertain = false;
            StateHasChanged();
        }
    }

    private async Task TestPrediction()
    {
        isTestingPrediction = true;
        ClearMessages();

        try
        {
            if (string.IsNullOrEmpty(testPrediction.problem_description) ||
                testPrediction.problem_description.Length < 10)
            {
                message = "Опис проблеми повинен містити принаймні 10 символів";
                return;
            }

            lastPredictionResponse = await PartsMLService.Predict(testPrediction);
            successMessage = "Передбачення успішно виконано";
        }
        catch (Exception e)
        {
            message = $"Помилка тестування передбачення: {e.Message}";
            lastPredictionResponse = null;
        }
        finally
        {
            isTestingPrediction = false;
            StateHasChanged();
        }
    }

    private async Task QuickFeedback(string predictionId, int rating, bool isCorrect)
    {
        try
        {
            var feedback = new FeedbackRequest
            {
                prediction_id = predictionId,
                is_correct_prediction = isCorrect,
                user_rating = rating,
                comments = $"Швидкий зворотний зв'язок: {rating}⭐",
                user_id = "admin",
                correct_parts = new List<string>()
            };

            var response = await PartsMLService.SubmitFeedback(feedback);
            successMessage = $"Швидкий зворотний зв'язок відправлено: {rating}⭐ - {response.message}";
            await LoadRetrainStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка швидкого зворотного зв'язку: {e.Message}";
        }
    }

    private async Task QuickFeedbackWithParts(string predictionId)
    {
        try
        {
            if (string.IsNullOrEmpty(quickFeedbackParts))
            {
                message = "Введіть правильні запчастини";
                return;
            }

            var parts = quickFeedbackParts.Split(',')
                .Select(p => p.Trim())
                .Where(p => !string.IsNullOrEmpty(p))
                .ToList();

            var feedback = new FeedbackRequest
            {
                prediction_id = predictionId,
                correct_parts = parts,
                is_correct_prediction = true,
                user_rating = 4,
                comments = "Швидкий зворотний зв'язок з запчастинами",
                user_id = "admin"
            };

            var response = await PartsMLService.SubmitFeedback(feedback);
            successMessage = $"Зворотний зв'язок відправлено з {parts.Count} запчастинами - {response.message}";
            quickFeedbackParts = "";
            await LoadRetrainStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка відправки зворотного зв'язку: {e.Message}";
        }
    }

    private async Task SubmitManualFeedback()
    {
        isSubmittingManual = true;
        ClearMessages();

        try
        {
            if (string.IsNullOrEmpty(manualFeedback.prediction_id))
            {
                message = "ID передбачення є обов'язковим";
                return;
            }

            if (!string.IsNullOrEmpty(correctPartsInput))
            {
                manualFeedback.correct_parts = correctPartsInput
                    .Split(',')
                    .Select(p => p.Trim())
                    .Where(p => !string.IsNullOrEmpty(p))
                    .ToList();
            }

            var response = await PartsMLService.SubmitFeedback(manualFeedback);
            successMessage = $"Ручний зворотний зв'язок успішно відправлено - {response.message}";

            // Reset form
            manualFeedback = new FeedbackRequest();
            correctPartsInput = "";

            await LoadRetrainStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка відправки ручного зворотного зв'язку: {e.Message}";
        }
        finally
        {
            isSubmittingManual = false;
            StateHasChanged();
        }
    }

    private async Task LoadMetrics()
    {
        try
        {
            metrics = await PartsMLService.GetMetrics();
            successMessage = "Метрики оновлено";
        }
        catch (Exception e)
        {
            message = $"Помилка завантаження метрик: {e.Message}";
        }
    }

    private async Task ClearCache()
    {
        try
        {
            var response = await PartsMLService.ClearCache();
            successMessage = $"Кеш очищено - {response.message}";
            await LoadMetrics();
        }
        catch (Exception e)
        {
            message = $"Помилка очищення кешу: {e.Message}";
        }
    }

    // Category management methods
    private async Task LoadCategories()
    {
        try
        {
            var allCategories = await CategoryService.GetAllCategoriesAsync();
            var allCategoriesList = allCategories.ToList();

            // Find all parent category IDs
            var parentIds = allCategoriesList
                .Where(c => c.ParentId.HasValue)
                .Select(c => c.ParentId.Value)
                .Distinct()
                .ToHashSet();

            // Filter: take child categories + root categories without children
            categories = allCategoriesList
                .Where(c => c.ParentId.HasValue || // Child categories
                            (!c.ParentId.HasValue && c.Id.HasValue && !parentIds.Contains(c.Id.Value))) // Root without children
                .OrderBy(c => c.Title)
                .ToList();
        }
        catch (Exception e)
        {
            message = $"Помилка завантаження категорій: {e.Message}";
        }
    }

    private List<CategoryViewModel> GetAvailableCategories()
    {
        return categories.Where(c => c.Title != null).OrderBy(c => c.Title).ToList();
    }

    private List<CategoryViewModel> GetPopularCategories()
    {
        return categories
            .Where(c => popularCategoryNames.Contains(c.Title))
            .OrderBy(c => c.Title)
            .ToList();
    }

    private CategoryViewModel GetCategoryById(Guid categoryId)
    {
        return categories.FirstOrDefault(c => c.Id == categoryId);
    }

    private string GetCategoryDisplayName(CategoryViewModel category)
    {
        if (category.ParentId.HasValue)
        {
            var parent = GetCategoryById(category.ParentId.Value);
            return parent != null ? $"{parent.Title} → {category.Title}" : category.Title;
        }
        return category.Title;
    }

    private List<Guid> GetSelectedCategories(string predictionId)
    {
        return uncertainSampleCategories.TryGetValue(predictionId, out var categories)
            ? categories
            : new List<Guid>();
    }

    private bool IsCategorySelected(string predictionId, Guid categoryId)
    {
        return GetSelectedCategories(predictionId).Contains(categoryId);
    }

    private void RemoveCategoryFromSample(string predictionId, Guid categoryId)
    {
        if (uncertainSampleCategories.ContainsKey(predictionId))
        {
            uncertainSampleCategories[predictionId].Remove(categoryId);
            StateHasChanged();
        }
    }

    private string GetCategorySearchTerm(string predictionId)
    {
        return categorySearchTerms.TryGetValue(predictionId, out var term) ? term : "";
    }

    private void SetCategorySearchTerm(string predictionId, string searchTerm)
    {
        categorySearchTerms[predictionId] = searchTerm;
        StateHasChanged();
    }

    private List<CategoryViewModel> GetFilteredCategories(string predictionId)
    {
        var searchTerm = GetCategorySearchTerm(predictionId);
        var allCategories = GetAvailableCategories();

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return allCategories;
        }

        return allCategories
            .Where(c => c.Title.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase) ||
                        GetCategoryDisplayName(c).Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            .OrderBy(c => c.Title.StartsWith(searchTerm, StringComparison.InvariantCultureIgnoreCase) ? 0 : 1)
            .ThenBy(c => c.Title)
            .ToList();
    }

    private void AddCategoryToSample(string predictionId, CategoryViewModel category)
    {
        if (!uncertainSampleCategories.ContainsKey(predictionId))
        {
            uncertainSampleCategories[predictionId] = new List<Guid>();
        }

        if (!uncertainSampleCategories[predictionId].Contains(category.Id.Value))
        {
            uncertainSampleCategories[predictionId].Add(category.Id.Value);

            // Clear search after adding category
            categorySearchTerms[predictionId] = "";

            StateHasChanged();
        }
    }

    private async Task SubmitUncertainCategories(string predictionId, bool isCorrect)
    {
        try
        {
            var selectedCategories = GetSelectedCategories(predictionId);
            if (!selectedCategories.Any())
            {
                message = "Оберіть хоча б один тип запчастин";
                return;
            }

            // Convert categories to part names
            var categoryNames = selectedCategories
                .Select(GetCategoryById)
                .Where(c => c != null)
                .Select(c => c.Title)
                .ToList();

            var feedback = new FeedbackRequest
            {
                prediction_id = predictionId,
                correct_parts = categoryNames,
                is_correct_prediction = isCorrect,
                user_rating = isCorrect ? 4 : 2,
                comments = $"Розмітка з невизначених зразків. Категорії: {string.Join(", ", categoryNames)}",
                user_id = "admin"
            };

            var response = await PartsMLService.SubmitFeedback(feedback);

            // Clear selected categories for this sample
            uncertainSampleCategories.Remove(predictionId);

            RemoveUncertainSample(predictionId);
            successMessage = $"Зворотний зв'язок відправлено для категорій: {string.Join(", ", categoryNames)} - {response.message}";

            await LoadRetrainStatus();
        }
        catch (Exception e)
        {
            message = $"Помилка відправки розмітки: {e.Message}";
        }
    }

    private void RemoveUncertainSample(string predictionId)
    {
        if (uncertainSamplesResponse?.samples != null)
        {
            uncertainSamplesResponse.samples.RemoveAll(s => s.prediction_id == predictionId);
            uncertainSampleCategories.Remove(predictionId);
            categorySearchTerms.Remove(predictionId); // Clear search
            StateHasChanged();
        }
    }

    // Helper methods
    private string GetStatusColor(string status) => status.ToLower() switch
    {
        "healthy" => "success",
        "degraded" => "warning",
        "unhealthy" => "danger",
        _ => "secondary"
    };

    private string GetTrainingStatusText(string status)
    {
        return status switch
        {
            "starting" => "Запуск",
            "preparing_data" => "Підготовка даних",
            "backing_up_model" => "Резервна копія",
            "preparing_model" => "Підготовка моделі",
            "creating_model" => "Створення моделі",
            "training" => "Тренування",
            "validating" => "Валідація",
            "deploying" => "Деплой",
            "completed" => "Завершено",
            "failed" => "Помилка",
            "error" => "Критична помилка",
            _ => status
        };
    }

    private string GetConfidenceLevel(double confidence)
    {
        return confidence switch
        {
            >= 0.8 => "high",
            >= 0.5 => "medium",
            _ => "low"
        };
    }

    private void ClearMessages()
    {
        message = "";
        successMessage = "";
    }
    private string? activeDropdownId = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupDropdownHandlers", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnDropdownShow(string dropdownId)
    {
        activeDropdownId = dropdownId;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDropdownHide()
    {
        activeDropdownId = null;
        StateHasChanged();
    }
}
</div>
<script>
    window.setupDropdownHandlers = (dotNetRef) => {
        document.addEventListener('show.bs.dropdown', (e) => {
            const button = e.target;
            const predictionId = button.closest('.uncertain-sample').getAttribute('data-prediction-id');
            if (predictionId) {
                dotNetRef.invokeMethodAsync('OnDropdownShow', predictionId);
            }
        });

        document.addEventListener('hide.bs.dropdown', () => {
            dotNetRef.invokeMethodAsync('OnDropdownHide');
        });
    };
        document.addEventListener('show.bs.dropdown', (e) => {
        e.target.closest('.uncertain-sample').style.zIndex = '1050';
    });

    document.addEventListener('hide.bs.dropdown', (e) => {
        e.target.closest('.uncertain-sample').style.zIndex = '1';
    });
</script>