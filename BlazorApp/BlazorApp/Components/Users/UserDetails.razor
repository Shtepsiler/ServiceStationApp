@page "/UserDetails/{UserId:guid}"
@using BlazorApp.Data
@using BlazorApp.Extensions.Exceptions
@using BlazorApp.Extensions.ViewModels.IdentityVMs
@using BlazorApp.Extensions.ViewModels.JobsVMs
@using BlazorApp.Extensions.ViewModels.Model
@using BlazorApp.Services.Interfaces
@using Blazorise
@using Blazorise.Bootstrap
@using Blazorise.Icons.FontAwesome
@inject IUserService UserService
@inject IRoleService RoleService
@inject IMechanicsService MechanicService
@inject ISpecialisationsService SpecialisationsService
@inject NavigationManager Navigation
@inject INotificationService NotificationService
@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>User Details</PageTitle>

<h3>User Details</h3>

@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@User" FormName="edit-user" OnValidSubmit="SaveUserDetails" method="post">
        <div class="card">
            <div class="card-header">
                <h4>Деталі @User.UserName</h4>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-3">Ім'я</dt>
                    <dd class="col-sm-9">
                        <InputText @bind-Value="User.UserName" class="form-control" />
                    </dd>

                    <dt class="col-sm-3">Електронна пошта</dt>
                    <dd class="col-sm-9">
                        <InputText @bind-Value="User.Email" class="form-control" />
                    </dd>

                    <dt class="col-sm-3">Номер телефону</dt>
                    <dd class="col-sm-9">
                        <InputText @bind-Value="User.PhoneNumber" class="form-control" />
                    </dd>

                    <dt class="col-sm-3">Чи підтверджений емайл</dt>
                    <dd class="col-sm-9">
                        <InputCheckbox @bind-Value="User.EmailConfirmed" class="form-check-input" />
                    </dd>
                    <!-- Role Selection -->
                    <dt class="col-sm-3">Роль</dt>
                    <dd class="col-sm-9">
                        <InputSelect @bind-Value="selectedRole" class="form-control" @onchange="OnRoleChanged">
                            @foreach (var role in roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                    </dd>

                    <!-- Specialization Selection, Visible Only for "Mechanic" Role -->
                    @if (selectedRole == "Mechanic")
                    {
                        <dt class="col-sm-3">Спеціалізація</dt>
                        <dd class="col-sm-9">
                            <InputSelect @bind-Value="selectedSpecialisation" class="form-control" @onchange="OnSpecialisationChanged">
                                @foreach (var spec in specialisations)
                                {
                                    <option value="@spec.name">@spec.name</option>
                                }
                            </InputSelect>
                        </dd>
                    }
                </dl>
                <button type="submit" class="btn btn-primary">Зберегти</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Скасувати</button>
                <button type="button" class="btn btn-danger" @onclick="ShowModal">Видалити</button>
            </div>
        </div>
    </EditForm>
}

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Підтвердження видалення</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            Ви впевнені що хочете видалити користувача?
        </ModalBody>
        <ModalFooter>
            <button Color="Color.Secondary" @onclick="async () => await HideModal()">Закрити</button>
            <button Color="Color.Primary" @onclick="async () => await DeleteUser()">Видалити</button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public Guid UserId { get; set; }
    [SupplyParameterFromForm(Name = "edit-user")]
    private UserViewModel? User { get; set; } = new UserViewModel();
    private string selectedRole { get; set; }
    private string selectedSpecialisation { get; set; }
    private List<string> roles = new List<string>() { "User", "Mechanic", "Admin" };
    private List<SpecialisationVM> specialisations;
    private bool isDeleteDialogVisible = false;
    public Modal modalRef { get; set; }
    private MechanicVM mechanic = new();

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserWithRole(UserId);
        selectedRole = User?.Role ?? string.Empty;
        specialisations = (await SpecialisationsService.GetSpecialisationsAsync()).ToList();

        if (selectedRole == "Mechanic")
        {
            // Отримати спеціалізацію механіка
            var mechanicDetails = (await MechanicService.GetMechanicsAsync()).FirstOrDefault(p => p.mechanicId == User.Id);
            selectedSpecialisation = specialisations.FirstOrDefault(p=>p.id == mechanicDetails.specialisationId)?.name; // Встановити дефолтну спеціалізацію
        }
    
    }

    private async Task ShowModal()
    {
        if (modalRef != null)
        {
            await modalRef.Show();
        }
    }

    private async Task HideModal()
    {
        if (modalRef != null)
        {
            await modalRef.Hide();
        }
    }

    private void OnSpecialisationChanged(ChangeEventArgs e)
    {
        selectedSpecialisation = e.Value.ToString();
    }

    private async Task DeleteUser()
    {
        try
        {
            if (User != null)
            {
                await UserService.DeleteUser(User.Id);
                await JS.InvokeVoidAsync("alert", "Користувача успішно видалено!");
                Navigation.NavigateTo("/Users");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Помилка при видаленні користувача: " + ex.Message);
        }
        finally
        {
            await HideModal();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/Users");
    }

    private async Task SaveUserDetails()
    {
        if (User != null)
        {
            try
            {
                if (User.Role != selectedRole)
                {
                    await RoleService.ReAsignRole(User.Id, selectedRole);
                }

                if (selectedRole == "Mechanic")
                {
                    mechanic.mechanicId = User.Id;
                    mechanic.specialisation = selectedSpecialisation;
                    await MechanicService.CreateMechanicAsync(mechanic);
                }

                await UserService.SaveChanges(User);
                JS.InvokeVoidAsync("alert", "Користувача успішно змінено!").GetAwaiter();
            }
            catch (ServerResponseException e)
            {
                // Handle exceptions
            }
        }
        Navigation.NavigateTo("/Users");
    }

    private async Task OnRoleChanged(ChangeEventArgs e)
    {
        selectedRole = e.Value.ToString();

        if (selectedRole != "Mechanic")
        {
            selectedSpecialisation = string.Empty; // Clear specialization for non-Mechanic roles
        }
        else
        {
            // Set default specialization if switching to "Mechanic"
            selectedSpecialisation = specialisations.FirstOrDefault()?.name ?? string.Empty;
        }

        // Re-render the form
        StateHasChanged();
    }
}
